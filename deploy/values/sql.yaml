

image:
  registry: docker.io
  repository: bitnami/postgresql
  tag: 10.7.0
  pullPolicy: Always

  # pullSecrets:
  #   - myRegistrKeySecretName

  debug: false

volumePermissions:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/minideb
    tag: latest
    pullPolicy: Always
  securityContext:
    runAsUser: 0

securityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001

replication:
  enabled: false
  user: repl_user
  password: repl_password
  slaveReplicas: 1
  synchronousCommit: "off"
  numSynchronousReplicas: 0
  applicationName: my_application

postgresqlUsername: postgres

# postgresqlPassword:


# usePasswordFile: false

# postgresqlDatabase:

postgresqlDataDir: /bitnami/postgresql

# postgresqlInitdbArgs:

# postgresqlInitdbWalDir:


# postgresqlConfiguration:

# postgresqlExtendedConf:

# pgHbaConfiguration: |-
#   local all all trust
#   host all all localhost trust
#   host mydatabase mysuser 192.168.0.0/24 md5

# configurationConfigMap:

# extendedConfConfigMap:

# initdbScripts:
#   my_init_script.sh:|
#      #!/bin/sh
#      echo "Do something."
#
# initdbScriptsConfigMap:

# initdbScriptsSecret:

# terminationGracePeriodSeconds: 30

service:
  type: ClusterIP
  # clusterIP: None
  port: 5432

  # nodePort:

  annotations: {}
  # loadBalancerIP:

persistence:
  enabled: true
  # existingClaim:
  mountPath: /bitnami/postgresql
  storageClass: local
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  annotations: {}

updateStrategy:
  type: RollingUpdate

master:
  nodeSelector: {}
  affinity: {}
  tolerations: []

slave:
  nodeSelector: {}
  affinity: {}
  tolerations: []

resources:
  requests:
    memory: 256Mi
    cpu: 250m

networkPolicy:
  enabled: false

  allowExternal: true

livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

metrics:
  enabled: false
  # resources: {}
  service:
    type: ClusterIP
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
    loadBalancerIP:
  image:
    registry: docker.io
    repository: wrouesnel/postgres_exporter
    tag: v0.4.7
    pullPolicy: IfNotPresent
    # pullSecrets:
    #   - myRegistrKeySecretName

  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

# Define custom environment variables to pass to the image here
extraEnv: {}