
image:
  repository: redis
  tag: 5.0.0-stretch
  pullPolicy: IfNotPresent
replicas: 1

redis:
  port: 6379
  masterGroupName: mymaster
  config:
    min-slaves-to-write: 0
    min-slaves-max-lag: 5   # Value in seconds
    maxmemory: "0"       # Max memory to use for each redis instance. Default is unlimited.
    maxmemory-policy: "volatile-lru"  # Max memory policy to use for each redis instance. Default is volatile-lru.
    # Determines if scheduled RDB backups are created. Default is false.
    # Please note that local (on-disk) RDBs will still be created when re-syncing with a new slave. The only way to prevent this is to enable diskless replication.
    save: "900 1"
    # When enabled, directly sends the RDB over the wire to slaves, without using the disk as intermediate storage. Default is false.
    repl-diskless-sync: "yes"
    rdbcompression: "yes"
    rdbchecksum: "yes"
    appendonly: "yes"

  # customConfig: |-
      # Define configuration here

  resources: {}
  #  requests:
  #    memory: 200Mi
  #    cpu: 100m
  #  limits:
  #    memory: 700Mi

sentinel:
  port: 26379
  quorum: 1
  config:
    down-after-milliseconds: 10000
    failover-timeout: 180000
    parallel-syncs: 5

  # customConfig: |-
      # Define configuration here

  resources: {}
  #  requests:
  #    memory: 200Mi
  #    cpu: 100m
  #  limits:
  #    memory: 200Mi

securityContext:
  runAsUser: 1000
  fsGroup: 1000
  runAsNonRoot: true

affinity: |
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchLabels:
            app:  {{ template "redis-ha.name" . }}
            release: {{ .Release.Name }}
        topologyKey: failure-domain.beta.kubernetes.io/zone

podDisruptionBudget: {}
  # maxUnavailable: 1
  # minAvailable: 1

auth: false
redisPassword: password

persistentVolume:
  enabled: true
  storageClass: local
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  annotations: {}